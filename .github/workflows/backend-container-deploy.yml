name: backend-container-deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.azure'
      - 'requirements.txt'
      - 'engine/**'
      - 'shared/**'
      - 'core/**'
      - '.github/workflows/backend-container-deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # Customize these via GitHub Repository Variables/Secrets
  ACR_NAME: ${{ vars.ACR_NAME }}               # e.g., infinityaiprodacr
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }} # e.g., infinityaiprodacr.azurecr.io
  RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }} # e.g., infinityai-prod-rg
  WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}     # e.g., infinityai-backend-app
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'infinityai-backend' }}
  DOCKERFILE: ${{ vars.DOCKERFILE || 'Dockerfile' }}
  BUILD_CONTEXT: ${{ vars.BUILD_CONTEXT || '.' }}
  APP_PORT: ${{ vars.APP_PORT || '8000' }}

jobs:
  build-and-push:
    name: Build and push image to ACR
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate variables
        run: |
          set -e
          echo "ACR_NAME=$ACR_NAME"
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER"
          echo "RESOURCE_GROUP=$RESOURCE_GROUP"
          echo "WEBAPP_NAME=$WEBAPP_NAME"
          test -n "$ACR_NAME" && test -n "$ACR_LOGIN_SERVER" && test -n "$RESOURCE_GROUP" && test -n "$WEBAPP_NAME"

      - name: ACR login
        run: |
          az acr login --name "$ACR_NAME"

      - name: Build image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_FULL="$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"
          echo "IMAGE_FULL=$IMAGE_FULL" >> $GITHUB_ENV
          docker build -f "$DOCKERFILE" -t "$IMAGE_FULL" "$BUILD_CONTEXT"

      - name: Push image
        run: |
          docker push "$IMAGE_FULL"

      - name: Output image reference
        id: image
        run: echo "image=$IMAGE_FULL" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Azure Web App (Container)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Web App has AcrPull role to ACR (via managed identity)
        run: |
          set -e
          # Enable system-assigned identity on the Web App (no-op if already enabled)
          PRINCIPAL_ID=$(az webapp identity assign -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" --query principalId -o tsv)
          echo "WebApp Managed Identity principalId: $PRINCIPAL_ID"

          # Get ACR resource ID
          ACR_ID=$(az acr show -n "$ACR_NAME" --query id -o tsv)
          echo "ACR_ID: $ACR_ID"

          # Assign AcrPull role (idempotent)
          az role assignment create --assignee "$PRINCIPAL_ID" --role AcrPull --scope "$ACR_ID" || echo "AcrPull role may already exist"

      - name: Configure Web App to use container image
        run: |
          set -e
          IMAGE="${{ needs.build-and-push.outputs.image }}"

          echo "Setting container image on Web App: $WEBAPP_NAME => $IMAGE"

          # Set container image (assumes Web App already has permission to pull from ACR)
          az webapp config container set \
            --name "$WEBAPP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --docker-custom-image-name "$IMAGE" \
            --enable-app-service-storage false

          # Ensure port and health path are set
          az webapp config appsettings set \
            --name "$WEBAPP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --settings WEBSITES_PORT=$APP_PORT

          # Health check path to speed up container readiness
          az webapp update \
            --name "$WEBAPP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --set siteConfig.healthCheckPath=/health

          # Optional: If ACR admin is enabled and you prefer registry creds (not recommended), uncomment and set secrets
          # az webapp config container set \
          #   --name "$WEBAPP_NAME" \
          #   --resource-group "$RESOURCE_GROUP" \
          #   --docker-custom-image-name "$IMAGE" \
          #   --docker-registry-server-url "https://$ACR_LOGIN_SERVER" \
          #   --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
          #   --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

          # Do not restart yet; apply app settings first in the next step

      - name: Apply backend app settings (DB + optional CORS)
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          CORS_ALLOW_ORIGINS: ${{ secrets.CORS_ALLOW_ORIGINS }}
        run: |
          set -e
          SETTINGS="WEBSITES_PORT=$APP_PORT"
          if [ -n "$DB_HOST" ]; then SETTINGS="$SETTINGS DB_HOST=$DB_HOST"; fi
          if [ -n "$DB_NAME" ]; then SETTINGS="$SETTINGS DB_NAME=$DB_NAME"; fi
          if [ -n "$DB_USER" ]; then SETTINGS="$SETTINGS DB_USER=$DB_USER"; fi
          if [ -n "$DB_PASSWORD" ]; then SETTINGS="$SETTINGS DB_PASSWORD=$DB_PASSWORD"; fi
          if [ -n "$CORS_ALLOW_ORIGINS" ]; then SETTINGS="$SETTINGS CORS_ALLOW_ORIGINS=$CORS_ALLOW_ORIGINS"; fi

          echo "Applying app settings: $SETTINGS"
          az webapp config appsettings set \
            --name "$WEBAPP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --settings $SETTINGS

          # Restart to apply image and settings
          az webapp restart --name "$WEBAPP_NAME" --resource-group "$RESOURCE_GROUP"

      - name: Show deployment URL
        run: |
          URL=$(az webapp show -n "$WEBAPP_NAME" -g "$RESOURCE_GROUP" --query defaultHostName -o tsv)
          echo "Deployed to: https://$URL"
