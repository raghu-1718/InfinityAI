# CI/CD Pipeline for InfinityAI.Pro

name: CI/CD
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ACR_NAME: infinityaiprodacr
  ACR_LOGIN_SERVER: infinityaiprodacr.azurecr.io
  IMAGE_NAME: infinityai-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Lint (flake8)
        run: |
          flake8 api/app engine/app/main.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 api/app engine/app/main.py --count --max-complexity=10 --max-line-length=120 --statistics
      - name: Type check (mypy)
        run: |
          mypy --ignore-missing-imports api/app engine/app/main.py
      - name: Format check (black)
        run: |
          black --check api/app engine/app/main.py
      - name: Run tests
        env:
          TESTING: '1'
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=core --cov-report=xml
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR Login
        run: |
          az acr login --name ${{ env.ACR_NAME }}
      - name: Build and push image to ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Configure Azure Web App to use container image
        uses: azure/webapps-deploy@v2
        with:
          app-name: infinityai-backend-app
          slot-name: production
          images: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
      - name: Ensure critical App Settings (WEBSITES_PORT, CORS_ALLOW_ORIGINS)
        env:
          CORS_ALLOW_ORIGINS: ${{ secrets.CORS_ALLOW_ORIGINS }}
        run: |
          ORIGINS=${CORS_ALLOW_ORIGINS:-https://www.infinityai.pro,https://api.infinityai.pro}
          az webapp config appsettings set \
            --name infinityai-backend-app \
            --resource-group InfinityAI-Prod-RG-West \
            --settings WEBSITES_PORT=8000 CORS_ALLOW_ORIGINS="$ORIGINS"
      - name: Run Alembic migrations
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry and Alembic
        run: |
          pip install poetry
          poetry install
      - name: Alembic upgrade
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          poetry run alembic upgrade head
