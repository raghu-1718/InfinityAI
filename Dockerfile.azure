# Dockerfile.azure - Optimized for Azure Container Apps
# Stage 1: Builder image
FROM python:3.12-slim AS builder

# Set work directory for the build stage
WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install dependencies into a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir -U pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime image
FROM python:3.12-slim

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g appuser -m -s /bin/bash appuser

# Set work directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH" \
    APP_PORT=8000

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY --chown=appuser:appuser . .

# Expose port
EXPOSE 8000

# Set the user
USER appuser

# Health check configuration (use Python stdlib to avoid curl dependency)
# Use a configurable URL to support reverse proxies or non-default ports; default to container-local
ENV HEALTHCHECK_URL="http://127.0.0.1:8000/health"
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["python","-c","import os,urllib.request,sys; u=urllib.request.urlopen(os.environ.get('HEALTHCHECK_URL','http://127.0.0.1:8000/health')); sys.exit(0 if u.getcode()==200 else 1)"]

# Command to run the application
CMD ["uvicorn", "engine.app.main:app", "--host", "0.0.0.0", "--port", "8000"]